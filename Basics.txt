-------------------------------------------------------------------------------------------
Introduction
-------------------------------------------------------------------------------------------

As C# is OOP based Language,It needs a class to run the program.2nd one is Main() 
method which is also very importat to run the program, If we click "Run" the CLR first finds 
the Main() method then other execution flow will start. Without Main() it can't run.As the 
rules,the Main() should always void it dosent return any value.Also static Cz In Main method
when CLR starts they can't create the object for the Main Class. System is Pre defined Name
space which is the part of BCL. Inside namespace there is a pre defined class and also In 
the Class there is pre defined method which receives value as argument and show the output.
Therefore the Console class is also static Cz we dont need to create object to run the class.
also The method which is WriteLine also static

class MahfuzBhuiyan
{
    static void Main()
    {
        System.Console.WriteLine("Welcome to C# Program");
    }
}
--------------------------------------------------------------------------------------------
Write, WriteLine, ReadKey, Clear
--------------------------------------------------------------------------------------------

class MahfuzBhuiyan
{
    static void Main()
    {
        // Goes to next line after printing
        System.Console.WriteLine("Assalamualaikum");
        // Only prints
        System.Console.Write("Welcome to My"); 
        System.Console.Write(" World");
        // Stops the program & wait for a key to run again from the start
        System.Console.ReadKey();
        // Clears the Console App & We will not see the upper part , Cz cleared but code
        // executed Succesfully
        System.Console.Clear(); 
        System.Console.WriteLine("Thank You");
    }
}
--------------------------------------------------------------------------------------------
Datatypes & Variables
--------------------------------------------------------------------------------------------

// Declarition of Variables
class MahfuzBhuiyan
{
    static void Main()
    {
	// local vairable Cz declared in the method
        string nameOfStudent = "Mahfuz";
        int ageOfStudent = 23;
        System.Console.Write("My name is " + nameOfStudent + " and I am " + ageOfStudent); // returns as String
    }
}

//Find Max Capacity of Data Types
class MahfuzBhuiyan
{
    static void Main()
    {
        // To check that Maximum capacity of this Datatype
        // MaxValue is not local varible Cz it not decleard in the method 
        // value is local, but MaxValue is a field from the int data type.(int is a struct )
        int value = int.MaxValue; 
        System.Console.WriteLine(value);
    }
}

----------------------------------------------------------------------------------------------
String Interpolation , Concatination, fromatting
----------------------------------------------------------------------------------------------
int id = 10;
int age = 24;
string name = "Mahfuz";

// String Concatination
Console.WriteLine("The Sum of " + name + "'s id & age is " + (id + age));

// String Interpolation
Console.WriteLine($"The sum of {name}'s id & age is {id + age}");

//String Formatting
Console.WriteLine("The sum of {0}'s id & age is {1}", name, id + age);

---------------------------------------------------------------------------------------------
User Input
----------------------------------------------------------------------------------------------

// Basic User input
Console.WriteLine("Enter Your Name");
// To store the input we need a varibale which is string , Cz C# only can get string input 
string name = Console.ReadLine(); 
Console.WriteLine("Hi " + name);

----------------------------------------------------------------------------------------------
Casting, Parse Method, Convertion Method
----------------------------------------------------------------------------------------------

// Implicit casting

int num = 10;
int num2 = 20;
// Implicit Casting, possible Cz int is lesser than double, double can hold more value than int
double sum = num + num2;  
Console.WriteLine(sum);
double num3 = 12.5;
double num4 = 13.6;
// Here, Cannot implicitly convert double to int Cz, double has more data input capability than int
int sum2 = num3 + num4; 
Console.WriteLine(sum2);


// Explicit Casting

double num = 25.5;
// Here possible Even if - int is lesser than double, double can hold more value than int
int cast = (int)num; 
Console.WriteLine(cast); 


// Parse Method 

// Only can convert String to other datatypes
int num1 = int.Parse(Console.ReadLine());
Console.WriteLine($"Your number is {num1}");


// Convert  method

// It can convert any datatype to other datatypes
int name = 123;
string name2 = Convert.ToString(name); // converting int to string
Console.WriteLine(name2 + name2);



// Casting → Reinterpret compatible types (no real transformation).

// Parse → Convert string → target type (must be valid string).

// Convert → General-purpose conversion across many types (with extra logic like rounding & null handling)


----------------------------------------------------------------------------------------------
Var keyword
----------------------------------------------------------------------------------------------
// Var Keyword
var name = "Mahfuz";
var age = 25;
Console.WriteLine($"My name is {name} & I'm {age} years old");

----------------------------------------------------------------------------------------------
("", / , newline) inside the String
----------------------------------------------------------------------------------------------

// "" inside the String
Console.WriteLine("I have \"20 corore\" bdt ");

// (/) inside the String
Console.WriteLine("You got 50\\100 marks ");

// newline inside a string
Console.WriteLine("Ok Google! \nYes Sir! How may I help you?");


----------------------------------------------------------------------------------------------
Operators
----------------------------------------------------------------------------------------------

// Arithmetic Operator 

class CodeExamples
{
    static void Main()
    {
        int num = 45, num2 = 10;
        double divison = num * 1.0 / num2; // Type Casting
        System.Console.WriteLine(num + num2);
        System.Console.WriteLine(num - num2);
        System.Console.WriteLine(divison);
        System.Console.WriteLine(num % num2);
    }
}

// Assingment Operator 

class CodeExamples
{
    static void Main()
    {
        int num1, num2;
        num1 = 10; num2 = 20;
        num1 += 10; num2 -= 10;
        num1 *= 2; num2 *= 2;
        num1 /= 1; num2 *= 1;
        num1 %= 1; num2 %= 1;
        System.Console.WriteLine(num1);
        System.Console.WriteLine(num2);
    }
}


// Pre increament , Post increament

class CodeExamples
{
    static void Main()
    {
        int num = 20;
        num++; // num =  21
        ++num; // num = 22
        num = num++; // num = 22 , Though num increases to 23 in memory but is Overwrites and assinged 22
        num = ++num; // num = 23
        num += 1; // num = 24
        System.Console.WriteLine(num++); // prints 24 , but increases to 25
        System.Console.WriteLine(num++); // prints 25, but increases to 26

    }
}

// Comparison and logical operator

class CodeExamples
{
    static void Main()
    {
        int num = 20, num2 = 10;
        bool res = num == num2 || num > num2;
        bool res2  = num != num2 && num >= num2;
        bool res3 = num > num2 ^ num != num2; // XOR
        System.Console.WriteLine(res);
        System.Console.WriteLine(res2);
        System.Console.WriteLine(res3);
    }
}

// Concatination operator
class CodeExamples
{
    static void Main()
    {
        int num = 20, num2 = 10;
        string name = "Mahfuz", name2 = "Akif";
        System.Console.WriteLine(name + name2); // returns As String
        System.Console.WriteLine("Hello Moto" + num ); // returns As String
        System.Console.WriteLine(name + num); // returns As String
        System.Console.WriteLine(num + num2); // But this one is Addition
    }
}

// Ternary  operator
class CodeExamples
{
    static void Main()
    {
        // First we need a varibale to store the data
        int num = 20, num2 = 30;
        string res = (num > num2) ? "YES" : "NO";
        System.Console.WriteLine(res);
    }
}

----------------------------------------------------------------------------------------------
Control Statements
----------------------------------------------------------------------------------------------

// Simple if

class CodeExamples
{
    static void Main()
    {
        int myNumber = 45;
        if (myNumber > 40)
        {
            System.Console.WriteLine("Congratulations! You've passed the exam");
        }
    }
}

// if - else
class CodeExamples
{
    static void Main()
    {
        int myNumber = 35;
        if (myNumber > 40)
        {
            System.Console.WriteLine("Congratulations! You've passed the exam");
        }
        else
        {
            System.Console.WriteLine("You've failed");
        }
    }
}


// if -  else if
class CodeExamples
{
    static void Main()
    {
        int siam = 39;
        if(siam >= 80)
        {
            System.Console.WriteLine("Siam got A+");
        }
        else if(siam >= 65)
        {
            System.Console.WriteLine("Siam got A");
        }
        else if(siam >= 40)
        {
            System.Console.WriteLine("Siam got B");
        }
        else
        {
            System.Console.WriteLine("Siam failed");
        }
    }
}


// Nested if

class CodeExamples
{
    static void Main()
    {
        int id = 22201013;
        double cgpa = 3.0;
        if(id == 22201013)
        {
            if(cgpa == 4.0)
            {
                System.Console.WriteLine("You got first Division");
            }
            else if(cgpa > 3.0)
            {
                System.Console.WriteLine("You got 2nd Division");
            }
            else
            {
                System.Console.WriteLine("You got third divsion");
            }
        }
        else
        {
            System.Console.WriteLine("Invalid Id");
        }

    }
}


